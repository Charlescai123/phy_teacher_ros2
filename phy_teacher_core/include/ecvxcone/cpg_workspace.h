
/*
Auto-generated by CVXPYgen on August 02, 2025 at 20:40:36.
Content: Type definitions and variable declarations.
*/

#include "cvxopt.h"
#include "misc.h"
#include "solver.h"

#ifndef CPG_TYPES_H
# define CPG_TYPES_H

typedef double cpg_float;
typedef int cpg_int;

// Compressed sparse column matrix
typedef struct {
  cpg_int      *p;
  cpg_int      *i;
  cpg_float    *x;
  cpg_int      nnz;
} cpg_csc;

// Canonical parameters
typedef struct {
  cpg_float    *c;         // Canonical parameter c
  cpg_csc      *A;         // Canonical parameter A
  cpg_float    *b;         // Canonical parameter b
  cpg_csc      *G;         // Canonical parameter G
  cpg_float    *h;         // Canonical parameter h
  cpg_float    d;          // Canonical parameter d
} Canon_Params_t;

// Flags indicating outdated canonical parameters
typedef struct {
  int        c;            // Bool, if canonical parameter c outdated
  int        A;            // Bool, if canonical parameter A outdated
  int        b;            // Bool, if canonical parameter b outdated
  int        G;            // Bool, if canonical parameter G outdated
  int        h;            // Bool, if canonical parameter h outdated
  int        d;            // Bool, if canonical parameter d outdated
} Canon_Outdated_t;

// Primal solution
typedef struct {
  cpg_float    *Q;         // Your variable Q
  cpg_float    *R;         // Your variable R
  cpg_float    *T;         // Your variable T
} CPG_Prim_t;

// Dual solution
typedef struct {
  cpg_float    *d0;        // Your dual variable for constraint d0
  cpg_float    *d1;        // Your dual variable for constraint d1
  cpg_float    *d2;        // Your dual variable for constraint d2
  cpg_float    *d3;        // Your dual variable for constraint d3
  cpg_float    *d4;        // Your dual variable for constraint d4
  cpg_float    *d5;        // Your dual variable for constraint d5
} CPG_Dual_t;

// Solver information
typedef struct {
  cpg_float    obj_val;    // Objective function value
  cpg_int      iter;       // Number of iterations
  cpg_int      status;     // Solver status
  cpg_float    pri_res;    // Primal residual
  cpg_float    dua_res;    // Dual residual
} CPG_Info_t;

// Solution and solver information
typedef struct {
  CPG_Prim_t   *prim;        // Primal solution
  CPG_Dual_t   *dual;        // Dual solution
  CPG_Info_t   *info;        // Solver info
} CPG_Result_t;

// Parameter deltas
typedef struct {
  cpg_float    *A;         // Delta of your parameter A
  cpg_float    *B;         // Delta of your parameter B
  cpg_float    *tracking_err_square;   // Delta of your parameter tracking_err_square
} CPG_Delta_t;

#endif // ifndef CPG_TYPES_H

// Vector containing flattened user-defined parameters
extern cpg_float cpg_params_vec[171];

// Sparse mappings from user-defined to canonical parameters
extern cpg_csc canon_G_map;
extern cpg_csc canon_h_map;

// Canonical parameters
extern cpg_float canon_c[136];
extern cpg_float canon_c_conditioning[136];
extern cpg_csc canon_G;
extern cpg_csc canon_G_conditioning;
extern cpg_float canon_h[973];
extern cpg_float canon_h_conditioning[973];

// Struct containing canonical parameters
extern Canon_Params_t Canon_Params;
extern Canon_Params_t Canon_Params_conditioning;

// Struct containing flags for outdated canonical parameters
extern Canon_Outdated_t Canon_Outdated;

// User-defined variables
extern cpg_float cpg_Q[100];
extern cpg_float cpg_R[60];
extern cpg_float cpg_T[36];

// Dual variables associated with user-defined constraints
extern cpg_float cpg_d0[400];
extern cpg_float cpg_d1[256];
extern cpg_float cpg_d2[100];
extern cpg_float cpg_d3[9];
extern cpg_float cpg_d4[36];
extern cpg_float cpg_d5[36];

// Struct containing primal solution
extern CPG_Prim_t CPG_Prim;

// Struct containing dual solution
extern CPG_Dual_t CPG_Dual;

// Struct containing solver info
extern CPG_Info_t CPG_Info;

// Struct containing solution and info
extern CPG_Result_t CPG_Result;

// ECVXCONE Default settings
extern ECVXConeSettings ecvxcone_settings;

// ECVXCONE Cone dimensions
extern DIMs ecvxcone_dims;

// ECVXCONE workspace
extern ECVXConeWorkspace* ecvxcone_ws;

// ECVXCONE solver function
extern int conelp(ECVXConeWorkspace* ecvxcone_ws, ECVXConeSettings* settings);

// ECVXCONE setup function
extern ECVXConeWorkspace* ecvxcone_setup(int n_var, int n_ineq, int n_eq, int nnz_G, int nnz_A, DIMs *dims, ECVXConeSettings *settings);

// ECVXCONE exit flag
extern cpg_int ecvxcone_flag;
